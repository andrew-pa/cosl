

$vertex_shader
input
{
	vec3 pos : position;
	vec3 norm : normal;
	vec3 tex : texcoord;
}

output
{
	vec3 pos : rs_position;
	vec3 posW;
	vec3 normW;
	vec3 texc;
}

cbuffer(0)
{
	mat4 wvp;
	mat4 inw;
	vec4 t;
}

void main()
{
	vec4 p = vec4(input.pos, 1.0);
	output.pos = mul(p, wvp);
	output.posW = input.pos;
	output.normW = mul(input.norm, inw);
	output.texc = input.tex;
}

$pixel_shader
input
{
	vec3 posW;
	vec3 normW;
	vec2 texc;
}

output
{
	vec4 col : target0;
}

texture2D tex(0)

void main()
{
	output.col = sample_texture(tex, input.texc);
}

$geometry_shader(4)
input(point)
{
	vec4 pos : rs_position;
}

output(triangle)
{
	vec4 pos : rs_position;
	vec2 texcoord;
}

void main()
{
	vec3 pos = inputs[0].pos.xyz;
	
	output.pos = pos;
	output.texcoord = vec2(0., 0.);
	emit_vertex();

	output.pos = pos + vec4(1, 0., 0., 0.);
	output.texcoord = vec2(1., 0.);
	emit_vertex();

	output.pos = pos - vec4(0., 1., 0., 0.);
	output.texcoord = vec2(0., 1.);
	emit_vertex();

	output.pos = pos + vec4(1., 1., 0., 0.);
	output.texcoord = vec2(1., 1.);
	emit_vertex();

	end_primitive();
}